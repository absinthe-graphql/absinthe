defmodule Absinthe.Subscription.ProxySupervisor do
  @moduledoc false

  use Supervisor

  def start_link([pubsub, registry, pool_size, async]) do
    Supervisor.start_link(__MODULE__, {pubsub, registry, pool_size, async})
  end

  def init({pubsub, registry, pool_size, async}) do
    task_super_name = Module.concat(registry, TaskSuper)
    task_super = {Task.Supervisor, name: task_super_name}

    # Shard numbers are generated by phash2 which is 0-based:
    proxies =
      for shard <- 0..(pool_size - 1) do
        {Absinthe.Subscription.Proxy, [task_super_name, pubsub, shard, async]}
      end

    Supervisor.init([task_super | proxies], strategy: :one_for_one)
  end
end
